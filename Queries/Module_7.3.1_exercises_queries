-- 
-- 
-- Module 7.3.1 exercises
-- 
-- 

-- get all employee table data for a birthday and hired date range
select * from employees 
WHERE (birth_date BETWEEN '1952-01-01' AND '1955-12-31')
and (hire_date BETWEEN '1985-01-01' AND '1988-12-31');

-- show the number of results in the above query
select count(first_name) from employees 
WHERE (birth_date BETWEEN '1952-01-01' AND '1955-12-31')
and (hire_date BETWEEN '1985-01-01' AND '1988-12-31');

-- save the results to a new table
select *
into retirement_info
from employees
WHERE (birth_date BETWEEN '1952-01-01' AND '1955-12-31')
and (hire_date BETWEEN '1985-01-01' AND '1988-12-31');

-- show the new table
select * from retirement_info

-- export data
-- The export setup is very similar to the import. 
-- Let's walk through exporting the "retirement_info" table together.
-- Right-click on your new table and select "Import/Export." 
-- Instead of importing anything, this time we'll be exporting.
-- Keep the Import/Export button toggled to "Export."
-- Click on the ... in the Filename field to automatically select 
-- the same directory from which you imported the other CSVs. 
-- Select a directory, but be sure to rename it to retirement_info.csv.
-- Be sure the format is still CSV.
-- Toggle the Header section to "Yes" to include column names in the new CSV files.
-- Select the comma as the delimiter to maintain the same format with all CSV files.
-- Click OK to start the export. After the file has been created, 
-- pgAdmin will confirm our file is ready to be viewed.


-- 
-- 
-- Module 7.3.3 JOINs exercises
-- 
-- 

-- Joining departments and dept_manager tables
SELECT departments.dept_name,
     dept_manager.emp_no,
     dept_manager.from_date,
     dept_manager.to_date
FROM departments
INNER JOIN dept_manager
ON departments.dept_no = dept_manager.dept_no;


-- Joining retirement_info and dept_emp tables
SELECT 
	retirement_info.emp_no,
    retirement_info.first_name,
	retirement_info.last_name,
    dept_emp.to_date
FROM retirement_info
LEFT JOIN dept_emp
ON retirement_info.emp_no = dept_emp.emp_no;

-- same thing, now filter for current employees, aka folks with '9999' as their to_date in de table
SELECT ri.emp_no,
    ri.first_name,
    ri.last_name,
	de.to_date
INTO current_emp
FROM retirement_info as ri
LEFT JOIN dept_emp as de
ON ri.emp_no = de.emp_no
WHERE de.to_date = ('9999-01-01');

-- query new table
select count(*) from current_emp

-- 
-- 
-- Module 7.3.4 COUNT, GROUP BY ORDER BY exercises
-- 
-- 

-- Employee count by department number - GROUP BY
-- wih depts in order by number - ORDER BY
-- saved to a new table - INTO
SELECT COUNT(ce.emp_no), de.dept_no
into emp_by_dept
FROM current_emp as ce
LEFT JOIN dept_emp as de
ON ce.emp_no = de.emp_no
GROUP BY de.dept_no
order by de.dept_no;



-- 
-- 
-- Module 7.3.5 exercises
-- 
-- 

-- Employee Information: A list of employees containing: 
-- -- their unique employee number, 
-- -- their last name, 
-- -- first name, 
-- -- gender, 
-- -- and salary
select e.emp_no as "Employee Number", e.last_name, e.first_name, e.gender, s.salary	
from employees e
left join salaries s
on e.emp_no=s.emp_no

--  now get the same info for only those employees retiring soon, aka the retirement_info table 
--  join'd with salaries table
-- -- -- select * from retirement_info
select ri.emp_no
,ri.last_name
,ri.first_name
,ri.gender
, s.salary	
from retirement_info ri
left join salaries s
on ri.emp_no=s.emp_no


-- Management: A list of managers for: 
-- -- each department, 
-- -- including the department number, 
-- -- name, 
-- -- and the manager's employee number, 
-- -- last name, first name, 
-- -- and the starting and ending employment dates

select 
d.dept_name as "Department Name"
, d.dept_no as "Department Number"
, dm.emp_no as "Managers Emp Number"
, e.last_name as "Managers Last Name"
, e.first_name as "Managers First Name"
, dm.from_date as "Starting Date" 
, dm.to_date as "Ending Date"
into current_managers
from departments d
join dept_manager dm
on d.dept_no=dm.dept_no
join employees e
on dm.emp_no=e.emp_no
where dm.to_date = ('9999-01-01');

-- Department Retirees: 
-- An updated current_emp list that includes everything it currently has, 
-- but also the employee's departments
select ce.*, de.dept_no
from current_emp ce
join dept_emp de on ce.emp_no=de.emp_no



-- 
-- 
-- Module 7.3.6 exercises
-- 
-- 

-- SKILL DRILL
-- Create a query that will return only the information relevant to the Sales team. 
-- The requested list includes:
-- -- Employee numbers
-- -- Employee first name
-- -- Employee last name
-- -- Employee department name
select e.emp_no
,e.first_name
,e.last_name
,d.dept_name
from employees e
left join dept_emp de on e.emp_no=de.emp_no
left join departments d on de.dept_no=d.dept_no
where d.dept_name ='Sales'

-- SKILL DRILL
-- Create another query that will return the same information for the Sales and Development teams:
select e.emp_no
,e.first_name
,e.last_name
,d.dept_name
from employees e
left join dept_emp de on e.emp_no=de.emp_no
left join departments d on de.dept_no=d.dept_no
where d.dept_name in ('Sales','Development')


-- 
-- 
-- Notes from Class 2021-10-28 
-- re: DISTINCT ON
-- 
-- 

-- Use DISTINCT ON and pass the customer_id in the parentheses to get each unique customer's latest rental date. 
-- DISTINCT ON is essentially "UNIQUE" - it will only return ONE (unique) value for the field in the parentheses
-- this is from "rental_db" database, not the same DB as above Module notes.
SELECT DISTINCT ON (customer_id) customer_id, rental_date
FROM rental
ORDER BY customer_id, rental_date DESC;